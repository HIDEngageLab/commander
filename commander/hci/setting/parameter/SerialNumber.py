# -*- coding: utf-8 -*-

# SPDX-FileCopyrightText: 2024 Roman Koch <koch.roman@gmail.com>
# SPDX-FileType: SOURCE
# SPDX-FileContributor: Created by Roman Koch
# SPDX-License-Identifier: MIT


class SerialNumber:
    """
    unique serial number (12 byte, autogenerated)

    input:
        12 bytes hex, like: 01 23 45 67 89 ab cd ef 00 11 22 33

    Attention: please change the serial number only if you exactly know, what you do.
    """

    DEFAULT = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

    def __init__(self, _value=DEFAULT):
        self.__value = [0x00] * self.type_len

        if not isinstance(_value, list):
            _value = SerialNumber.DEFAULT

        self.serialize(_value)

    @property
    def value(self):
        return self.__value

    @property
    def type_len(self):
        return 12

    def serialize(self, _value):
        if _value is None:
            self.__value = [0x00] * self.type_len
        else:
            if len(_value) < self.type_len:
                _value = [0] * (self.type_len - len(_value)) + _value
            elif len(_value) > 12:
                _value = _value[:12]

            self.__value = []
            for val in _value:
                if isinstance(val, str):
                    self.__value.append(int(val, 16))
                else:
                    self.__value.append(val)

    def __str__(self):
        s = '%s' % (' '.join('%02X' % a for a in self.__value))
        return s
